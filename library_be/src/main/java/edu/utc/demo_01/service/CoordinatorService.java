package edu.utc.demo_01.service;

import com.github.javafaker.Faker;
import edu.utc.demo_01.dto.coordinator.request.CreatePatron;
import edu.utc.demo_01.dto.coordinator.request.ResponseTicket;
import edu.utc.demo_01.entity.*;
import edu.utc.demo_01.exception.AppException;
import edu.utc.demo_01.exception.ErrorCode;
import edu.utc.demo_01.repository.*;
import jakarta.annotation.PostConstruct;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.concurrent.TimeUnit;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class CoordinatorService {
    PasswordEncoder passwordEncoder;
    UserRepository userRepository;
    AuthCredentialRepository authCredentialRepository;
    UserRoleRepository userRoleRepository;
    RoleRepository roleRepository;
    MembershipRepository membershipRepository;
    BookRepository bookRepository;
    DDCClassificationRepository ddcRepository;
    BorrowRecordRepository borrowRecordRepository;
    BookReviewRepository bookReviewRepository;
    TicketResponseRepository ticketResponseRepository;
    HelpTicketRepository helpTicketRepository;
    @Transactional
    public boolean createPatron(CreatePatron request) {
        User user = new User();
        user.setUserID(request.getUserID());
        user.setFullName(request.getFullName());
        user.setUserType(request.getUserType());
        user.setStatus("ACTIVE");
        user.setCreatedAt(LocalDate.now());
        if (request.getDob() != null) user.setDob(request.getDob());
        user.setGender(request.getGender());
        user.setExpiry(LocalDate.now().plusMonths(6));
        user.setMemberPoints(0);
        if (request.getUserImage() != null) user.setUserImage(request.getUserImage());
        if (request.getNationalID() != null) user.setNationalID(request.getNationalID());
        user =  userRepository.save(user);

        AuthCredential authCredential = new AuthCredential();
        authCredential.setUserID(user);
        authCredential.setEmail(request.getEmail());
        authCredential.setPasswordHash(passwordEncoder.encode("123456"));
        authCredential.setLastLogin(Instant.now());
        authCredentialRepository.save(authCredential);

        Role role = roleRepository.findByRoleName("Patron");
        UserRole userRole = new UserRole();
        userRole.setUser(user);
        userRole.setRole(role);
        userRole.setAssignedAt(Instant.now());
        userRoleRepository.save(userRole);

        Membership membership = new Membership();
        membership.setUserID(user);
        membership.setMembershipType("ƒê·ªìng");
        membership.setUpdateBy(userRepository.findByUserID(request.getStaffID()).orElseThrow(() -> new AppException(ErrorCode.CAN_NOT_GET_USER_INFORMATION)));
        membership.setUpdatedAt(Instant.now());
        membershipRepository.save(membership);
        return true;
    }
    public boolean resetPatronPassword(String patronID) {
        User user = userRepository.findByUserID(patronID).orElseThrow(() -> new AppException(ErrorCode.CAN_NOT_GET_USER_INFORMATION));
        AuthCredential credential = authCredentialRepository.findByUserID(user).orElseThrow(() -> new AppException(ErrorCode.CAN_NOT_GET_USER_INFORMATION));
        credential.setPasswordHash(passwordEncoder.encode("123456"));
        authCredentialRepository.save(credential);
        return true;
    }
    public boolean responseTicket(ResponseTicket request) {
        TicketResponse ticketResponse = new TicketResponse();
        String userID = SecurityContextHolder.getContext().getAuthentication().getName();
        if (userID == null) throw new AppException(ErrorCode.CAN_NOT_GET_USER_INFORMATION);
        User coordinator = userRepository.findByUserID(userID).orElseThrow();
        ticketResponse.setTicketID(helpTicketRepository.findByTicketID(request.getTicketID()).orElseThrow(() -> new AppException(ErrorCode.CAN_NOT_FIND_TICKET)));
        ticketResponse.setStaffID(coordinator);
        ticketResponse.setTitle(request.getTitle());
        ticketResponse.setResponseText(request.getResponseText());
        ticketResponse.setCreatedAt(Instant.now());
        ticketResponseRepository.save(ticketResponse);
        return true;
    }
    //regionFakeData
    private final Faker faker = new Faker();
    private final Random random = new Random();
    private final String[] formats = {"14,5 cm x 20,5 cm", "16 cm x 24 cm", "A4", "A5"};

    @PostConstruct
    public void generateFakeBooks() {
        if (bookRepository.count() <= 100) {
            System.out.println("üìö ƒêang t·∫°o d·ªØ li·ªáu s√°ch gi·∫£ l·∫≠p...");

            // Danh s√°ch t√™n s√°ch th·ª±c t·∫ø theo ch·ªß ƒë·ªÅ
            Map<String, List<String>> bookTitlesByTopic = new HashMap<>();

            // L·∫≠p tr√¨nh Java
            bookTitlesByTopic.put("L·∫≠p tr√¨nh Java", List.of(
                    "Java Core - N·ªÅn t·∫£ng l·∫≠p tr√¨nh hi·ªán ƒë·∫°i",
                    "L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng v·ªõi Java",
                    "Java Spring Boot - X√¢y d·ª±ng ·ª©ng d·ª•ng enterprise",
                    "Java Design Patterns - C√°c m·∫´u thi·∫øt k·∫ø ph·∫ßn m·ªÅm",
                    "L·∫≠p tr√¨nh ƒëa lu·ªìng v√† b·∫•t ƒë·ªìng b·ªô trong Java",
                    "Java v√† Microservices - Ki·∫øn tr√∫c ph√¢n t√°n hi·ªán ƒë·∫°i",
                    "Ph√°t tri·ªÉn ·ª©ng d·ª•ng web v·ªõi Java Servlet v√† JSP",
                    "Hibernate v√† JPA - Thao t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu trong Java",
                    "B·∫£o m·∫≠t ·ª©ng d·ª•ng Java - Nguy√™n l√Ω v√† th·ª±c h√†nh",
                    "X√¢y d·ª±ng RESTful API v·ªõi Java Spring"
            ));

            // Tr√≠ tu·ªá nh√¢n t·∫°o
            bookTitlesByTopic.put("Tr√≠ tu·ªá nh√¢n t·∫°o", List.of(
                    "Nh·∫≠p m√¥n Tr√≠ tu·ªá nh√¢n t·∫°o v√† H·ªçc m√°y",
                    "Deep Learning - L√Ω thuy·∫øt v√† ·ª©ng d·ª•ng",
                    "X·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n v·ªõi Python v√† TensorFlow",
                    "Computer Vision - Nh·∫≠n di·ªán v√† ph√¢n t√≠ch h√¨nh ·∫£nh",
                    "Reinforcement Learning - H·ªçc tƒÉng c∆∞·ªùng v√† ·ª©ng d·ª•ng",
                    "Tr√≠ tu·ªá nh√¢n t·∫°o trong ph√¢n t√≠ch d·ªØ li·ªáu l·ªõn",
                    "H·ªçc m√°y cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu",
                    "Neural Networks - M·∫°ng n∆°-ron v√† ·ª©ng d·ª•ng th·ª±c ti·ªÖn",
                    "AI v√† ƒë·∫°o ƒë·ª©c - Nh·ªØng th√°ch th·ª©c c·ªßa c√¥ng ngh·ªá th√¥ng minh",
                    "Tr√≠ tu·ªá nh√¢n t·∫°o ·ª©ng d·ª•ng trong y t·∫ø v√† ch·∫©n ƒëo√°n"
            ));

            // H·ªá th·ªëng nh√∫ng
            bookTitlesByTopic.put("H·ªá th·ªëng nh√∫ng", List.of(
                    "L·∫≠p tr√¨nh Vi ƒëi·ªÅu khi·ªÉn v·ªõi Arduino",
                    "Thi·∫øt k·∫ø v√† ph√°t tri·ªÉn h·ªá th·ªëng IoT",
                    "H·ªá th·ªëng nh√∫ng th·ªùi gian th·ª±c v·ªõi RTOS",
                    "L·∫≠p tr√¨nh Raspberry Pi cho IoT v√† automation",
                    "Thi·∫øt k·∫ø m·∫°ch ƒëi·ªán t·ª≠ cho h·ªá th·ªëng nh√∫ng",
                    "H·ªá th·ªëng nh√∫ng v√† c·∫£m bi·∫øn th√¥ng minh",
                    "Ph√°t tri·ªÉn ·ª©ng d·ª•ng nh√∫ng v·ªõi Linux",
                    "Thi·∫øt k·∫ø h·ªá th·ªëng nh√∫ng ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng",
                    "Giao ti·∫øp trong h·ªá th·ªëng IoT - C√°c giao th·ª©c v√† chu·∫©n",
                    "B·∫£o m·∫≠t cho h·ªá th·ªëng IoT v√† thi·∫øt b·ªã nh√∫ng"
            ));

            // Ph√°t tri·ªÉn web
            bookTitlesByTopic.put("Ph√°t tri·ªÉn web", List.of(
                    "Ph√°t tri·ªÉn web Full-Stack v·ªõi MERN",
                    "L·∫≠p tr√¨nh Frontend hi·ªán ƒë·∫°i v·ªõi React v√† Redux",
                    "Angular - Framework to√†n di·ªán cho ·ª©ng d·ª•ng web",
                    "Node.js - X√¢y d·ª±ng ·ª©ng d·ª•ng server-side hi·ªáu nƒÉng cao",
                    "Responsive Web Design - Thi·∫øt k·∫ø web ƒë√°p ·ª©ng",
                    "Progressive Web Apps - T∆∞∆°ng lai c·ªßa web application",
                    "CSS n√¢ng cao v√† SASS/SCSS",
                    "API RESTful - Thi·∫øt k·∫ø v√† ph√°t tri·ªÉn",
                    "TypeScript - JavaScript m·∫°nh m·∫Ω v·ªõi ki·ªÉu d·ªØ li·ªáu tƒ©nh",
                    "Web Performance Optimization - T·ªëi ∆∞u hi·ªáu su·∫•t ·ª©ng d·ª•ng web"
            ));

            // B·∫£o m·∫≠t th√¥ng tin
            bookTitlesByTopic.put("B·∫£o m·∫≠t th√¥ng tin", List.of(
                    "B·∫£o m·∫≠t m·∫°ng v√† h·ªá th·ªëng th√¥ng tin",
                    "Ethical Hacking - K·ªπ thu·∫≠t t·∫•n c√¥ng v√† ph√≤ng th·ªß",
                    "M·∫≠t m√£ h·ªçc ·ª©ng d·ª•ng trong b·∫£o m·∫≠t d·ªØ li·ªáu",
                    "Ph√¢n t√≠ch v√† ph√≤ng ch·ªëng m√£ ƒë·ªôc",
                    "B·∫£o m·∫≠t ·ª©ng d·ª•ng web - OWASP Top 10",
                    "ƒêi·ªÅu tra s·ªë v√† ph√¢n t√≠ch d·ªØ li·ªáu ph√°p l√Ω",
                    "Zero Trust Security - M√¥ h√¨nh b·∫£o m·∫≠t kh√¥ng tin t∆∞·ªüng",
                    "B·∫£o m·∫≠t Cloud v√† Container",
                    "DevSecOps - T√≠ch h·ª£p b·∫£o m·∫≠t v√†o quy tr√¨nh ph√°t tri·ªÉn",
                    "Qu·∫£n l√Ω r·ªßi ro v√† tu√¢n th·ªß an ninh th√¥ng tin"
            ));

            // Khoa h·ªçc d·ªØ li·ªáu
            bookTitlesByTopic.put("Khoa h·ªçc d·ªØ li·ªáu", List.of(
                    "Python cho Khoa h·ªçc d·ªØ li·ªáu v√† Ph√¢n t√≠ch",
                    "Khai ph√° d·ªØ li·ªáu - Nguy√™n l√Ω v√† k·ªπ thu·∫≠t",
                    "Tr·ª±c quan h√≥a d·ªØ li·ªáu v·ªõi D3.js v√† Matplotlib",
                    "Big Data Analytics v·ªõi Hadoop v√† Spark",
                    "Th·ªëng k√™ v√† x√°c su·∫•t cho Khoa h·ªçc d·ªØ li·ªáu",
                    "Machine Learning trong ph√¢n t√≠ch d·ªØ li·ªáu",
                    "Data Wrangling - X·ª≠ l√Ω v√† chu·∫©n b·ªã d·ªØ li·ªáu",
                    "SQL v√† NoSQL - Qu·∫£n l√Ω v√† truy v·∫•n d·ªØ li·ªáu l·ªõn",
                    "D·ª± b√°o v√† ph√¢n t√≠ch chu·ªói th·ªùi gian",
                    "Ph√¢n t√≠ch d·ªØ li·ªáu x√£ h·ªôi v√† khai th√°c √Ω ki·∫øn"
            ));

            // Qu·∫£n l√Ω d·ª± √°n ph·∫ßn m·ªÅm
            bookTitlesByTopic.put("Qu·∫£n l√Ω d·ª± √°n ph·∫ßn m·ªÅm", List.of(
                    "Ph∆∞∆°ng ph√°p Agile trong ph√°t tri·ªÉn ph·∫ßn m·ªÅm",
                    "Scrum - Framework cho qu·∫£n l√Ω d·ª± √°n linh ho·∫°t",
                    "DevOps - K·∫øt h·ª£p ph√°t tri·ªÉn v√† v·∫≠n h√†nh",
                    "Qu·∫£n l√Ω d·ª± √°n ph·∫ßn m·ªÅm theo chu·∫©n PMI",
                    "∆Ø·ªõc l∆∞·ª£ng v√† l·∫≠p k·∫ø ho·∫°ch d·ª± √°n ph·∫ßn m·ªÅm",
                    "Lean Software Development - Ph√°t tri·ªÉn tinh g·ªçn",
                    "Qu·∫£n l√Ω r·ªßi ro trong d·ª± √°n CNTT",
                    "Kanban - Qu·∫£n l√Ω lu·ªìng c√¥ng vi·ªác hi·ªáu qu·∫£",
                    "Product Owner - Vai tr√≤ v√† k·ªπ nƒÉng trong Agile",
                    "Continuous Integration & Continuous Delivery"
            ));

            // C·∫•u tr√∫c d·ªØ li·ªáu v√† Gi·∫£i thu·∫≠t
            bookTitlesByTopic.put("C·∫•u tr√∫c d·ªØ li·ªáu v√† Gi·∫£i thu·∫≠t", List.of(
                    "C·∫•u tr√∫c d·ªØ li·ªáu v√† gi·∫£i thu·∫≠t c∆° b·∫£n",
                    "Ph√¢n t√≠ch v√† thi·∫øt k·∫ø thu·∫≠t to√°n",
                    "L·∫≠p tr√¨nh ƒë·ªông v√† backtracking",
                    "Thu·∫≠t to√°n t√¨m ki·∫øm v√† s·∫Øp x·∫øp n√¢ng cao",
                    "C·∫•u tr√∫c d·ªØ li·ªáu ƒë·ªì th·ªã v√† ·ª©ng d·ª•ng",
                    "C√¢y nh·ªã ph√¢n t√¨m ki·∫øm v√† c√¢y c√¢n b·∫±ng",
                    "Thu·∫≠t to√°n tham lam v√† quy ho·∫°ch ƒë·ªông",
                    "Gi·∫£i thu·∫≠t x·ª≠ l√Ω chu·ªói v√† pattern matching",
                    "C·∫•u tr√∫c d·ªØ li·ªáu cho Big Data",
                    "Thu·∫≠t to√°n song song v√† ph√¢n t√°n"
            ));

            // H·ªá ƒëi·ªÅu h√†nh
            bookTitlesByTopic.put("H·ªá ƒëi·ªÅu h√†nh", List.of(
                    "Nguy√™n l√Ω h·ªá ƒëi·ªÅu h√†nh hi·ªán ƒë·∫°i",
                    "Linux/UNIX - Qu·∫£n tr·ªã h·ªá th·ªëng",
                    "L·∫≠p tr√¨nh Shell v√† Scripting",
                    "Qu·∫£n l√Ω b·ªô nh·ªõ v√† ti·∫øn tr√¨nh trong h·ªá ƒëi·ªÅu h√†nh",
                    "H·ªá ƒëi·ªÅu h√†nh th·ªùi gian th·ª±c",
                    "·∫¢o h√≥a v√† Container trong h·ªá th·ªëng hi·ªán ƒë·∫°i",
                    "H·ªá ƒëi·ªÅu h√†nh nh√∫ng v√† IoT",
                    "Windows Server - Qu·∫£n tr·ªã v√† c·∫•u h√¨nh",
                    "L·∫≠p tr√¨nh h·ªá th·ªëng v·ªõi C/C++",
                    "Cloud OS v√† Distributed Operating Systems"
            ));

            // M·∫°ng m√°y t√≠nh
            bookTitlesByTopic.put("M·∫°ng m√°y t√≠nh", List.of(
                    "Nguy√™n l√Ω v√† giao th·ª©c m·∫°ng m√°y t√≠nh",
                    "B·∫£o m·∫≠t m·∫°ng doanh nghi·ªáp",
                    "M·∫°ng kh√¥ng d√¢y v√† di ƒë·ªông",
                    "Cloud Computing v√† Virtualization",
                    "Software-Defined Networking",
                    "Thi·∫øt k·∫ø v√† tri·ªÉn khai m·∫°ng Cisco",
                    "IPv6 - Giao th·ª©c Internet th·∫ø h·ªá m·ªõi",
                    "M·∫°ng 5G v√† ·ª©ng d·ª•ng",
                    "Qu·∫£n tr·ªã m·∫°ng doanh nghi·ªáp quy m√¥ l·ªõn",
                    "VoIP v√† Unified Communications"
            ));

            List<String> degrees = List.of("TS.", "ThS.", "GS.", "PGS.TS.");

            // Danh s√°ch nh√† xu·∫•t b·∫£n
            List<String> publishers = List.of(
                    "NXB B√°ch Khoa H√† N·ªôi",
                    "NXB ƒê·∫°i h·ªçc Qu·ªëc gia H√† N·ªôi",
                    "NXB ƒê·∫°i h·ªçc Qu·ªëc gia TP.HCM",
                    "NXB Khoa h·ªçc v√† K·ªπ thu·∫≠t",
                    "NXB Th√¥ng tin v√† Truy·ªÅn th√¥ng",
                    "NXB ƒê·∫°i h·ªçc C√¥ng ngh·ªá",
                    "Springer",
                    "O'Reilly Media",
                    "Manning Publications",
                    "Packt Publishing"
            );

            // Danh s√°ch c√°c ch·ªß ƒë·ªÅ v√† lƒ©nh v·ª±c
            List<String> bookTopics = new ArrayList<>(bookTitlesByTopic.keySet());

            for (int i = 0; i < 50; i++) {
                Book book = new Book();

                // Ch·ªçn ch·ªß ƒë·ªÅ ng·∫´u nhi√™n
                String topic = bookTopics.get(random.nextInt(bookTopics.size()));

                // L·∫•y danh s√°ch t√™n s√°ch theo ch·ªß ƒë·ªÅ
                List<String> topicTitles = bookTitlesByTopic.get(topic);

                // Ch·ªçn t√™n s√°ch ng·∫´u nhi√™n t·ª´ danh s√°ch
                String bookName = topicTitles.get(random.nextInt(topicTitles.size()));
                book.setBookName(bookName);

                // T·∫°o t√™n t√°c gi·∫£
                book.setAuthor(degrees.get(random.nextInt(degrees.size())) + " " + generateVietnameseName());

                // X√°c ƒë·ªãnh lo·∫°i s√°ch d·ª±a tr√™n t√™n s√°ch
                if (bookName.toLowerCase().contains("gi√°o tr√¨nh") ||
                        bookName.toLowerCase().contains("nh·∫≠p m√¥n") ||
                        bookName.toLowerCase().contains("nguy√™n l√Ω") ||
                        bookName.toLowerCase().contains("c∆° b·∫£n")) {
                    book.setBookType("Gi√°o tr√¨nh");
                } else {
                    book.setBookType("T√†i li·ªáu tham kh·∫£o");
                }

                // T·∫°o ISBN h·ª£p l·ªá (13 ch·ªØ s·ªë)
                book.setIsbn(faker.number().digits(13));

                // S·ªë l∆∞·ª£ng v√† t√¨nh tr·∫°ng h·ª£p l√Ω
                int totalCopies = random.nextInt(10, 50);
                book.setTotalCopies(totalCopies);
                book.setAvailableCopies(random.nextInt(1, totalCopies + 1));

                // NƒÉm xu·∫•t b·∫£n ph√π h·ª£p v·ªõi ch·ªß ƒë·ªÅ
                if (topic.contains("Tr√≠ tu·ªá nh√¢n t·∫°o") || topic.contains("Deep Learning") || topic.contains("IoT")) {
                    // Ch·ªß ƒë·ªÅ m·ªõi
                    book.setPublicationYear(random.nextInt(2015, 2025));
                } else if (topic.contains("Web") || topic.contains("Cloud") || topic.contains("Mobile")) {
                    // Ch·ªß ƒë·ªÅ t∆∞∆°ng ƒë·ªëi m·ªõi
                    book.setPublicationYear(random.nextInt(2010, 2025));
                } else {
                    // Ch·ªß ƒë·ªÅ c∆° b·∫£n
                    book.setPublicationYear(random.nextInt(2000, 2025));
                }

                // Ng√¥n ng·ªØ ph√π h·ª£p v·ªõi nh√† xu·∫•t b·∫£n
                String publisher = publishers.get(random.nextInt(publishers.size()));
                if (publisher.startsWith("NXB")) {
                    book.setLanguage("Ti·∫øng Vi·ªát");
                } else {
                    book.setLanguage("English");
                }

                // S·ªë trang h·ª£p l√Ω d·ª±a tr√™n lo·∫°i s√°ch
                if (book.getBookType().equals("Gi√°o tr√¨nh")) {
                    book.setPageCount(random.nextInt(300, 800));
                } else {
                    book.setPageCount(random.nextInt(150, 500));
                }

                // ƒê·ªãnh d·∫°ng
                book.setFormat(formats[random.nextInt(formats.length)]);

                // M√¥ t·∫£ chi ti·∫øt h∆°n
                String description = "Cu·ªën s√°ch \"" + bookName + "\" ";
                if (book.getBookType().equals("Gi√°o tr√¨nh")) {
                    description += "l√† t√†i li·ªáu gi·∫£ng d·∫°y ƒë∆∞·ª£c bi√™n so·∫°n c√¥ng phu, cung c·∫•p ki·∫øn th·ª©c ";
                    description += topic.toLowerCase() + " m·ªôt c√°ch h·ªá th·ªëng v√† to√†n di·ªán. ";
                    description += "ƒê√¢y l√† t√†i li·ªáu thi·∫øt y·∫øu cho sinh vi√™n, gi·∫£ng vi√™n v√† nh·ªØng ng∆∞·ªùi mu·ªën t√¨m hi·ªÉu v·ªÅ " + topic.toLowerCase() + ".";
                } else {
                    description += "l√† s√°ch tham kh·∫£o chuy√™n s√¢u v·ªÅ " + topic.toLowerCase() + ", ";
                    description += "cung c·∫•p nhi·ªÅu ki·∫øn th·ª©c th·ª±c ti·ªÖn v√† c·∫≠p nh·∫≠t c√°c xu h∆∞·ªõng m·ªõi nh·∫•t trong lƒ©nh v·ª±c. ";
                    description += "S√°ch ph√π h·ª£p v·ªõi ng∆∞·ªùi ƒë√£ c√≥ ki·∫øn th·ª©c n·ªÅn t·∫£ng mu·ªën n√¢ng cao tr√¨nh ƒë·ªô chuy√™n m√¥n.";
                }
                book.setDescription(description);

                // ·∫¢nh b√¨a
                book.setCoverImage("https://covers.openlibrary.org/b/id/" + faker.number().numberBetween(1000000, 1050000) + "-L.jpg");

                // M√£ DDC
                book.setDDCCode(ddcRepository.findRandomDDC());

                bookRepository.save(book);
            }
            System.out.println("‚úÖ Ho√†n t·∫•t t·∫°o d·ªØ li·ªáu s√°ch!");
        }
    }

    // T·∫°o t√™n Vi·ªát Nam th·ª±c t·∫ø h∆°n
    private String generateVietnameseName() {
        Random random = new Random();

        // H·ªç ph·ªï bi·∫øn ·ªü Vi·ªát Nam
        List<String> LAST_NAMES = List.of(
                "Nguy·ªÖn", "Tr·∫ßn", "L√™", "Ph·∫°m", "Ho√†ng", "V≈©", "ƒê·∫∑ng", "B√πi", "ƒê·ªó", "H·ªì",
                "Ng√¥", "D∆∞∆°ng", "L√Ω", "Phan", "V√µ", "ƒê√†o", "ƒêo√†n", "ƒêinh", "Hu·ª≥nh", "Tr∆∞∆°ng"
        );

        // T√™n ƒë·ªám nam
        List<String> MALE_MIDDLE_NAMES = List.of(
                "VƒÉn", "H·ªØu", "Minh", "Qu·ªëc", "ƒê·ª©c", "Thanh", "C√¥ng", "ƒê√¨nh", "Xu√¢n", "Tu·∫•n",
                "Anh", "Quang", "Vi·ªát", "B√°", "ƒêƒÉng", "Kh·∫Øc", "Th√†nh", "ƒê·∫°i", "M·∫°nh", "Ho√†ng"
        );

        // T√™n ƒë·ªám n·ªØ
        List<String> FEMALE_MIDDLE_NAMES = List.of(
                "Th·ªã", "Ng·ªçc", "Ho√†i", "Thanh", "Minh", "Thu", "Ph∆∞∆°ng", "Kim", "Th√∫y", "M·ªπ",
                "Di·ªáu", "Th√πy", "H·ªìng", "Xu√¢n", "Nh∆∞", "B√≠ch", "Th·ªßy", "√Ånh", "Qu·ª≥nh", "H√†"
        );

        // T√™n nam
        List<String> MALE_FIRST_NAMES = List.of(
                "H√πng", "Nam", "D≈©ng", "Hi·∫øu", "Minh", "Tu·∫•n", "Th√†nh", "Phong", "H·∫£i", "ƒê·∫°t",
                "Long", "V≈©", "Trung", "Qu√¢n", "Khoa", "Anh", "Ph√∫c", "S∆°n", "Huy", "Tr√≠"
        );

        // T√™n n·ªØ
        List<String> FEMALE_FIRST_NAMES = List.of(
                "Linh", "H√†", "Mai", "H∆∞∆°ng", "Th·∫£o", "Trang", "Ph∆∞∆°ng", "Lan", "Anh", "Ng·ªçc",
                "Huy·ªÅn", "Nhung", "Y·∫øn", "Ch√¢u", "Th·ªßy", "Chi", "Nga", "V√¢n", "Tr√¢m", "Th√∫y"
        );

        // X√°c ƒë·ªãnh gi·ªõi t√≠nh ng·∫´u nhi√™n
        boolean isMale = random.nextBoolean();

        String lastName = LAST_NAMES.get(random.nextInt(LAST_NAMES.size()));
        String middleName;
        String firstName;

        if (isMale) {
            middleName = MALE_MIDDLE_NAMES.get(random.nextInt(MALE_MIDDLE_NAMES.size()));
            firstName = MALE_FIRST_NAMES.get(random.nextInt(MALE_FIRST_NAMES.size()));
        } else {
            middleName = FEMALE_MIDDLE_NAMES.get(random.nextInt(FEMALE_MIDDLE_NAMES.size()));
            firstName = FEMALE_FIRST_NAMES.get(random.nextInt(FEMALE_FIRST_NAMES.size()));
        }

        return lastName + " " + middleName + " " + firstName;
    }

    @PostConstruct
    public void seedData() {
        if (userRepository.count() > 0) return;

        List<String> userTypes = List.of("Teacher", "Student", "Researcher", "Patron");
        List<String> membershipTypes = List.of("ƒê·ªìng", "B·∫°c", "V√†ng");
        List<String> genders = List.of("Male", "Female");
        Random random = new Random();

        for (int i = 0; i < 200; i++) {
            String userId = "211" + String.format("%06d", random.nextInt(1000000));
            String fullName = generateVietnameseName();
            String gender = genders.get(random.nextInt(genders.size()));
            LocalDate dob = faker.date().birthday().toInstant()
                    .atZone(ZoneId.systemDefault()).toLocalDate();
            String status = "ACTIVE";
            LocalDate createdAt = LocalDate.now();
            int memberPoints = random.nextInt(1500);
            LocalDate expiry = createdAt.plusYears(1);
            String nationalID = faker.idNumber().valid();
            String userImage = "https://i.pravatar.cc/150?img=" + faker.number().numberBetween(1, 70);

            User user = new User();
            user.setUserID(userId);
            user.setFullName(fullName);
            user.setUserType(userTypes.get(random.nextInt(userTypes.size())));
            user.setStatus(status);
            user.setCreatedAt(createdAt);
            user.setDob(dob);
            user.setGender(gender);
            user.setExpiry(expiry);
            user.setMemberPoints(memberPoints);
            user.setUserImage(userImage);
            user.setNationalID(nationalID);

            userRepository.save(user);

            // T·∫°o AuthCredential
            AuthCredential auth = new AuthCredential();
            auth.setUserID(user);
            auth.setEmail(faker.internet().emailAddress());
            auth.setPasswordHash(UUID.randomUUID().toString());
            auth.setLastLogin(Instant.now());
            authCredentialRepository.save(auth);

            // T·∫°o Membership
            Membership membership = new Membership();
            membership.setUserID(user);
            if (memberPoints > 1000) {
                membership.setMembershipType("V√†ng");
            } else if (memberPoints > 500) {
                membership.setMembershipType("B·∫°c");
            } else {
                membership.setMembershipType("ƒê·ªìng");
            }
            membership.setUpdatedAt(Instant.now());
            membershipRepository.save(membership);

            // G√°n UserRole
            Role role = roleRepository.findByRoleName(user.getUserType());
            if (role != null) {
                UserRole userRole = new UserRole();
                userRole.setUser(user);
                userRole.setRole(role);
                userRole.setAssignedAt(Instant.now());
                userRoleRepository.save(userRole);
            }
        }
    }

    @PostConstruct
    public void seedBorrowRecords() {
        if (borrowRecordRepository.count() > 100) return;

        List<User> users = userRepository.findAll();
        List<Book> books = bookRepository.findAll();
        User librarian = userRepository.findByUserID("librarian").orElseThrow();
        Random random = new Random();

        if (users.isEmpty() || books.isEmpty()) {
            return;
        }

        for (int i = 0; i < 1000; i++) {
            User user = users.get(random.nextInt(users.size()));
            Book book = books.get(random.nextInt(books.size()));


            Instant borrowDate = faker.date().past(60, TimeUnit.DAYS).toInstant();
            Instant dueDate = borrowDate.plus(14, ChronoUnit.DAYS);
            boolean isReturned = random.nextBoolean();
            Instant returnDate = isReturned ? dueDate.plus(random.nextInt(10), ChronoUnit.DAYS) : null;

            BorrowRecord record = new BorrowRecord();
            record.setUserID(user);
            record.setBookID(book);
            record.setBorrowDate(borrowDate);
            record.setDueDate(dueDate);
            record.setExtendCount(random.nextInt(3));
            record.setExtendedDate(record.getExtendCount() > 0 ? dueDate.plus(7, ChronoUnit.DAYS) : null);
            record.setApprovedBy(librarian);
            record.setReturnApprovedBy(isReturned ? librarian : null);
            record.setReturnDate(returnDate);

            borrowRecordRepository.save(record);
        }
    }

    @PostConstruct
    public void generateBookReviews() {
        if (bookReviewRepository.count() < 10) {
            System.out.println("üìù ƒêang t·∫°o d·ªØ li·ªáu ƒë√°nh gi√° s√°ch...");

            // L·∫•y danh s√°ch t·∫•t c·∫£ s√°ch v√† ng∆∞·ªùi d√πng
            List<Book> allBooks = bookRepository.findAll();
            List<User> allUsers = userRepository.findAll();

            if (allBooks.isEmpty() || allUsers.isEmpty()) {
                System.out.println("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o ƒë√°nh gi√°: Kh√¥ng c√≥ s√°ch ho·∫∑c ng∆∞·ªùi d√πng trong h·ªá th·ªëng!");
                return;
            }

            // Danh s√°ch c√°c b√¨nh lu·∫≠n t√≠ch c·ª±c theo th·ªÉ lo·∫°i s√°ch
            Map<String, List<String>> positiveCommentsByTopic = new HashMap<>();

            // L·∫≠p tr√¨nh Java
            positiveCommentsByTopic.put("L·∫≠p tr√¨nh Java", List.of(
                    "S√°ch gi·∫£i th√≠ch r·∫•t r√µ v·ªÅ c√°c kh√°i ni·ªám OOP trong Java, gi√∫p t√¥i hi·ªÉu s√¢u h∆°n v·ªÅ t√≠nh k·∫ø th·ª´a v√† ƒëa h√¨nh.",
                    "Ph·∫ßn v·ªÅ Stream API v√† Lambda expressions ƒë∆∞·ª£c tr√¨nh b√†y r·∫•t d·ªÖ hi·ªÉu, c√≥ nhi·ªÅu v√≠ d·ª• th·ª±c t·∫ø.",
                    "Cu·ªën s√°ch n√†y ƒë√£ gi√∫p t√¥i hi·ªÉu r√µ h∆°n v·ªÅ Spring Boot v√† c√°ch x√¢y d·ª±ng RESTful API.",
                    "T√†i li·ªáu r·∫•t chi ti·∫øt v·ªÅ Java Collections Framework, gi√∫p t√¥i n·∫Øm v·ªØng c·∫•u tr√∫c d·ªØ li·ªáu.",
                    "ƒê√¢y l√† cu·ªën s√°ch t·ªët nh·∫•t v·ªÅ Java m√† t√¥i t·ª´ng ƒë·ªçc, ƒë·∫∑c bi·ªát l√† ph·∫ßn Concurrency v√† Multithreading.",
                    "R·∫•t h·ªØu √≠ch cho vi·ªác √¥n thi ch·ª©ng ch·ªâ Oracle Java Certification.",
                    "S√°ch c√≥ nhi·ªÅu b√†i t·∫≠p th·ª±c h√†nh gi√∫p c·ªßng c·ªë ki·∫øn th·ª©c hi·ªáu qu·∫£."
            ));

            // Tr√≠ tu·ªá nh√¢n t·∫°o
            positiveCommentsByTopic.put("Tr√≠ tu·ªá nh√¢n t·∫°o", List.of(
                    "S√°ch gi·ªõi thi·ªáu r·∫•t t·ªët v·ªÅ Machine Learning, t·ª´ thu·∫≠t to√°n c∆° b·∫£n ƒë·∫øn ·ª©ng d·ª•ng th·ª±c t·∫ø.",
                    "Ph·∫ßn v·ªÅ Neural Networks v√† Deep Learning ƒë∆∞·ª£c tr√¨nh b√†y d·ªÖ hi·ªÉu v·ªõi nhi·ªÅu h√¨nh ·∫£nh minh h·ªça.",
                    "T√¥i r·∫•t ·∫•n t∆∞·ª£ng v·ªõi c√°c case study v·ªÅ ·ª©ng d·ª•ng AI trong y t·∫ø v√† t√†i ch√≠nh.",
                    "Cu·ªën s√°ch n√†y ƒë√£ gi√∫p t√¥i n·∫Øm ƒë∆∞·ª£c c√°c kh√°i ni·ªám ph·ª©c t·∫°p trong NLP m·ªôt c√°ch d·ªÖ d√†ng.",
                    "ƒê√¢y l√† t√†i li·ªáu tham kh·∫£o tuy·ªát v·ªùi cho c·∫£ sinh vi√™n v√† chuy√™n gia v·ªÅ AI.",
                    "Ph·∫ßn tri·ªÉn khai c√°c thu·∫≠t to√°n v·ªõi TensorFlow v√† PyTorch r·∫•t chi ti·∫øt v√† d·ªÖ l√†m theo.",
                    "R·∫•t th√≠ch c√°ch t√°c gi·∫£ gi·∫£i th√≠ch v·ªÅ Reinforcement Learning v·ªõi v√≠ d·ª• th·ª±c t·∫ø."
            ));

            // Ph√°t tri·ªÉn web
            positiveCommentsByTopic.put("Ph√°t tri·ªÉn web", List.of(
                    "S√°ch cung c·∫•p ki·∫øn th·ª©c ƒë·∫ßy ƒë·ªß v·ªÅ React v√† Redux, t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao.",
                    "Ph·∫ßn v·ªÅ Responsive Design r·∫•t h·ªØu √≠ch cho c√¥ng vi·ªác frontend c·ªßa t√¥i.",
                    "T√¥i ƒë√£ x√¢y d·ª±ng ƒë∆∞·ª£c m·ªôt d·ª± √°n web ho√†n ch·ªânh nh·ªù h∆∞·ªõng d·∫´n t·ª´ cu·ªën s√°ch n√†y.",
                    "Cu·ªën s√°ch gi√∫p t√¥i hi·ªÉu r√µ h∆°n v·ªÅ RESTful API v√† c√°ch thi·∫øt k·∫ø backend hi·ªáu qu·∫£.",
                    "ƒê√¢y l√† t√†i li·ªáu kh√¥ng th·ªÉ thi·∫øu cho b·∫•t k·ª≥ ai mu·ªën h·ªçc v·ªÅ Angular.",
                    "Ph·∫ßn v·ªÅ security v√† authentication ƒë∆∞·ª£c tr√¨nh b√†y r·∫•t chi ti·∫øt v√† th·ª±c t·∫ø.",
                    "S√°ch c√≥ nhi·ªÅu m·∫πo t·ªëi ∆∞u hi·ªáu su·∫•t web r·∫•t h·ªØu √≠ch."
            ));

            // Danh s√°ch c√°c b√¨nh lu·∫≠n ti√™u c·ª±c/trung t√≠nh
            List<String> negativeComments = List.of(
                    "S√°ch kh√° kh√≥ hi·ªÉu v·ªõi ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu, c·∫ßn c√≥ ki·∫øn th·ª©c n·ªÅn t·∫£ng.",
                    "M·ªôt s·ªë ph·∫ßn tr√¨nh b√†y h∆°i r∆∞·ªùm r√† v√† l·∫∑p l·∫°i nhi·ªÅu l·∫ßn.",
                    "C√°c v√≠ d·ª• trong s√°ch ƒë√¥i khi qu√° ƒë∆°n gi·∫£n, kh√¥ng s√°t v·ªõi th·ª±c t·∫ø c√¥ng vi·ªác.",
                    "T√¥i mong ƒë·ª£i nhi·ªÅu h∆°n v·ªÅ c√°c case study th·ª±c t·∫ø trong lƒ©nh v·ª±c n√†y.",
                    "Ph·∫ßn code trong s√°ch c√≥ m·ªôt s·ªë l·ªói v√† kh√¥ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo version m·ªõi nh·∫•t.",
                    "S√°ch thi·∫øu ph·∫ßn b√†i t·∫≠p v√† h∆∞·ªõng d·∫´n th·ª±c h√†nh.",
                    "C·∫ßn b·ªï sung th√™m v·ªÅ c√°c c√¥ng ngh·ªá m·ªõi trong lƒ©nh v·ª±c n√†y.",
                    "N·ªôi dung c√≥ v·∫ª ƒë√£ l·ªói th·ªùi so v·ªõi c√¥ng ngh·ªá hi·ªán t·∫°i.",
                    "T·ªëc ƒë·ªô xu·∫•t b·∫£n m·ªõi h∆°i ch·∫≠m so v·ªõi s·ª± ph√°t tri·ªÉn c·ªßa c√¥ng ngh·ªá.",
                    "ƒê√¥i khi thu·∫≠t ng·ªØ s·ª≠ d·ª•ng kh√≥ hi·ªÉu v√† kh√¥ng c√≥ gi·∫£i th√≠ch r√µ r√†ng."
            );

            // T·∫°o kho·∫£ng 150-200 ƒë√°nh gi√°
            int numberOfReviews = random.nextInt(150, 201);

            for (int i = 0; i < 1000; i++) {
                BookReview review = new BookReview();

                // Ch·ªçn s√°ch v√† ng∆∞·ªùi d√πng ng·∫´u nhi√™n
                Book randomBook = allBooks.get(random.nextInt(allBooks.size()));
                User randomUser = allUsers.get(random.nextInt(allUsers.size()));

                // ƒê·∫£m b·∫£o m·ªói ng∆∞·ªùi d√πng ch·ªâ ƒë√°nh gi√° m·ªói cu·ªën s√°ch m·ªôt l·∫ßn
                if (bookReviewRepository.existsByBookIDAndUserID(randomBook, randomUser)) {
                    // N·∫øu ƒë√£ t·ªìn t·∫°i ƒë√°nh gi√°, th·ª≠ l·∫°i v·ªõi s√°ch kh√°c
                    continue;
                }

                review.setBookID(randomBook);
                review.setUserID(randomUser);

                // X√°c ƒë·ªãnh rating ng·∫´u nhi√™n (1-5 sao)
                // Ph√¢n b·ªë kh√¥ng ƒë·ªÅu ƒë·ªÉ t·∫°o d·ªØ li·ªáu th·ª±c t·∫ø h∆°n (thi√™n v·ªÅ 4-5 sao)
                int[] ratingDistribution = {1, 2, 3, 3, 4, 4, 4, 5, 5, 5};
                int rating = ratingDistribution[random.nextInt(ratingDistribution.length)];
                review.setRating(rating);

                // T·∫°o comment d·ª±a tr√™n rating
                String bookName = randomBook.getBookName().toLowerCase();
                String comment;

                if (rating >= 4) {
                    // B√¨nh lu·∫≠n t√≠ch c·ª±c
                    List<String> positiveComments = null;

                    // T√¨m ch·ªß ƒë·ªÅ ph√π h·ª£p t·ª´ t√™n s√°ch
                    for (String topic : positiveCommentsByTopic.keySet()) {
                        if (bookName.contains(topic.toLowerCase())) {
                            positiveComments = positiveCommentsByTopic.get(topic);
                            break;
                        }
                    }

                    // N·∫øu kh√¥ng t√¨m th·∫•y ch·ªß ƒë·ªÅ c·ª• th·ªÉ, d√πng b√¨nh lu·∫≠n chung
                    if (positiveComments == null) {
                        positiveComments = List.of(
                                "Cu·ªën s√°ch r·∫•t hay v√† b·ªï √≠ch, t√¥i h·ªçc ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÅu m·ªõi.",
                                "N·ªôi dung ƒë∆∞·ª£c tr√¨nh b√†y r√µ r√†ng, d·ªÖ hi·ªÉu v·ªõi nhi·ªÅu v√≠ d·ª• th·ª±c t·∫ø.",
                                "S√°ch r·∫•t ph√π h·ª£p cho c·∫£ ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu v√† ng∆∞·ªùi ƒë√£ c√≥ kinh nghi·ªám.",
                                "T√¥i r·∫•t th√≠ch c√°ch t√°c gi·∫£ tr√¨nh b√†y v·∫•n ƒë·ªÅ m·ªôt c√°ch logic v√† s√∫c t√≠ch.",
                                "ƒê√¢y l√† m·ªôt trong nh·ªØng cu·ªën s√°ch t·ªët nh·∫•t v·ªÅ ch·ªß ƒë·ªÅ n√†y m√† t√¥i t·ª´ng ƒë·ªçc.",
                                "S√°ch c√≥ nhi·ªÅu th√¥ng tin h·ªØu √≠ch v√† c·∫≠p nh·∫≠t v·ªõi xu h∆∞·ªõng hi·ªán nay.",
                                "T√†i li·ªáu r·∫•t chi ti·∫øt v√† c√≥ t√≠nh h·ªçc thu·∫≠t cao."
                        );
                    }

                    comment = positiveComments.get(random.nextInt(positiveComments.size()));
                } else if (rating == 3) {
                    // B√¨nh lu·∫≠n trung t√≠nh
                    comment = negativeComments.get(random.nextInt(negativeComments.size()));
                } else {
                    // B√¨nh lu·∫≠n ti√™u c·ª±c
                    comment = negativeComments.get(random.nextInt(negativeComments.size()));

                    // Th√™m t·ª´ ng·ªØ ti√™u c·ª±c h∆°n cho rating th·∫•p
                    List<String> negativeOpeners = List.of(
                            "Th·∫•t v·ªçng v·ªõi cu·ªën s√°ch n√†y. ",
                            "Kh√¥ng nh∆∞ mong ƒë·ª£i. ",
                            "T√¥i kh√¥ng khuy√™n b·∫°n ƒë·ªçc cu·ªën n√†y. ",
                            "ƒê√°ng l·∫Ω kh√¥ng n√™n mua cu·ªën n√†y. "
                    );

                    comment = negativeOpeners.get(random.nextInt(negativeOpeners.size())) + comment;
                }

                review.setComment(comment);

                // T·∫°o ng√†y ƒë√°nh gi√° ng·∫´u nhi√™n trong 2 nƒÉm g·∫ßn ƒë√¢y
                LocalDate now = LocalDate.now();
                int daysToSubtract = random.nextInt(1, 730); // T·ªëi ƒëa 2 nƒÉm
                review.setCreatedAt(now.minusDays(daysToSubtract));

                // L∆∞u ƒë√°nh gi√°
                bookReviewRepository.save(review);
            }

            System.out.println("‚úÖ Ho√†n t·∫•t t·∫°o " + numberOfReviews + " ƒë√°nh gi√° s√°ch!");
        }
    }

    // C·∫ßn th√™m method n√†y v√†o BookReviewRepository
    //endregion
}
